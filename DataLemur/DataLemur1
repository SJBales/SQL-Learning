--My Query
SELECT measurement_day,
       SUM(CASE WHEN ord_ % 2 = 0 THEN measurement_value ELSE 0 END) even_sum,
       SUM(CASE WHEN ord_ % 2 != 0 THEN measurement_value ELSE 0 END) odd_sum
FROM (SELECT measurement_id, 
             measurement_value,
             measurement_day,
             ROW_NUMBER() 
                OVER(PARTITION BY measurement_day 
                     ORDER BY measurement_time) ord_
      FROM(SELECT measurement_id,
                  measurement_value,
                  measurement_time,
                  measurement_time::DATE AS measurement_day
           FROM measurements) subq1) subq2
GROUP BY measurement_day;

--Solution Query
WITH ranked_measurements AS (
  SELECT 
    CAST(measurement_time AS DATE) AS measurement_day, 
    measurement_value, 
    ROW_NUMBER() OVER (
      PARTITION BY CAST(measurement_time AS DATE) 
      ORDER BY measurement_time) AS measurement_num 
  FROM measurements
) 

SELECT 
  measurement_day, 
  SUM(measurement_value) FILTER (WHERE measurement_num % 2 != 0) AS odd_sum, 
  SUM(measurement_value) FILTER (WHERE measurement_num % 2 = 0) AS even_sum 
FROM ranked_measurements
GROUP BY measurement_day;

-- Same set of operations, but their solution is more efficient by collapsing the two subqueries into one table. Requires repeat of CAST statement
